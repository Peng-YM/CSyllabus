{
  "version": 3,
  "file": "ngx-disqus.umd.js",
  "sources": [
    "ng://ngx-disqus/src/disqus.module.ts",
    "ng://ngx-disqus/src/disqus.component.ts",
    "ng://ngx-disqus/src/disqus.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\r\nimport { DisqusComponent } from './disqus.component';\r\nimport { DisqusService } from './disqus.service';\r\nimport { SHORTNAME } from './disqus.token';\r\n\r\n/** Initialize Disqus with shortname */\r\nexport function DisqusFactory(shortname: string) {\r\n  return new DisqusService(shortname);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [DisqusComponent],\r\n  exports: [DisqusComponent]\r\n})\r\nexport class DisqusModule {\r\n  static forRoot(shortname: string): ModuleWithProviders {\r\n    return {\r\n      ngModule: DisqusModule,\r\n      providers: [\r\n        { provide: SHORTNAME, useValue: shortname },\r\n        {\r\n          provide: DisqusService,\r\n          useFactory: DisqusFactory,\r\n          deps: [SHORTNAME]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
    "import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  Renderer2,\r\n  ElementRef,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { DisqusService } from './disqus.service';\r\nimport { DisqusComment, DisqusReady } from './disqus.model';\r\n\r\n@Component({\r\n  selector: 'disqus',\r\n  template: '<div id=\"disqus_thread\"></div>',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class DisqusComponent implements OnChanges, OnDestroy {\r\n\r\n  /** DISQUS options */\r\n  @Input() url: string;\r\n  @Input() identifier: string;\r\n  @Input() title: string;\r\n  @Input() category: string;\r\n  @Input() language: string;\r\n\r\n  /** DISQUS events */\r\n  @Output() newComment = new EventEmitter<DisqusComment>(true);\r\n  @Output() ready = new EventEmitter<DisqusReady>(true);\r\n  @Output() paginate = new EventEmitter<any>(true);\r\n\r\n  constructor(private renderer: Renderer2, private el: ElementRef, private dService: DisqusService) { }\r\n\r\n  ngOnChanges() {\r\n    /** Reset Disqus if any input changed */\r\n\r\n    if (!this.dService.window.DISQUS) {\r\n      this.addDisqusScript();\r\n    } else {\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  /** Add DISQUS script */\r\n  addDisqusScript() {\r\n\r\n    /** Set DISQUS config */\r\n    this.dService.window.disqus_config = this.getConfig();\r\n\r\n    const disqusScript = this.renderer.createElement('script');\r\n    disqusScript.src = `//${this.dService.shortname}.disqus.com/embed.js`;\r\n    disqusScript.async = true;\r\n    disqusScript.type = 'text/javascript';\r\n    this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());\r\n    this.renderer.appendChild(this.el.nativeElement, disqusScript);\r\n  }\r\n\r\n  /** Reset DISQUS with the new config */\r\n  reset() {\r\n    this.dService.window.DISQUS.reset({\r\n      reload: true,\r\n      config: this.getConfig()\r\n    });\r\n  }\r\n\r\n  /** Create DISQUS config from inputs */\r\n  getConfig() {\r\n    const self = this;\r\n    return function () {\r\n      this.page.identifier = self.identifier;\r\n      this.page.url = self.validateUrl(self.url);\r\n      this.page.title = self.title;\r\n      this.category_id = self.category;\r\n      this.language = self.language;\r\n\r\n      /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */\r\n      this.callbacks.onNewComment = [(e) => {\r\n        self.newComment.emit(e);\r\n      }];\r\n\r\n      this.callbacks.onReady = [(e) => {\r\n        self.ready.emit(e);\r\n      }];\r\n\r\n      this.callbacks.onPaginate = [(e) => {\r\n        self.paginate.emit(e);\r\n      }];\r\n    };\r\n  }\r\n\r\n  validateUrl(url: string) {\r\n    /** Validate URL input */\r\n    if (url) {\r\n      const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n\r\n      if (r.test(url)) {\r\n        return url;\r\n      } else {\r\n        console.warn('[Disqus]: Invalid URL, return undefined');\r\n      }\r\n    }\r\n    /** DISQUS will fallback to \"Window.location.href\" when URL is undefined */\r\n    return undefined;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dService.window.DISQUS = undefined;\r\n    this.dService.window.disqus_config = undefined;\r\n  }\r\n}\r\n",
    "import { Injectable, Inject } from '@angular/core';\r\nimport { SHORTNAME } from './disqus.token';\r\n\r\ndeclare const global: any;\r\n\r\n@Injectable()\r\nexport class DisqusService {\r\n\r\n  constructor( @Inject(SHORTNAME) public shortname: string) {\r\n  }\r\n\r\n  get window() {\r\n    return _window();\r\n  }\r\n}\r\n\r\nfunction _window() {\r\n  return typeof window !== 'undefined' ? window : global;\r\n}\r\n\r\n"
  ],
  "names": [
    "Input",
    "Component",
    "EventEmitter"
  ],
  "mappings": "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"
}
