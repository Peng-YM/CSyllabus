{
  "version": 3,
  "file": "ngx-disqus.umd.min.js",
  "sources": [
    "ng://ngx-disqus/src/disqus.module.ts",
    "ng://ngx-disqus/src/disqus.service.ts",
    "ng://ngx-disqus/src/disqus.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\r\nimport { DisqusComponent } from './disqus.component';\r\nimport { DisqusService } from './disqus.service';\r\nimport { SHORTNAME } from './disqus.token';\r\n\r\n/** Initialize Disqus with shortname */\r\nexport function DisqusFactory(shortname: string) {\r\n  return new DisqusService(shortname);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [DisqusComponent],\r\n  exports: [DisqusComponent]\r\n})\r\nexport class DisqusModule {\r\n  static forRoot(shortname: string): ModuleWithProviders {\r\n    return {\r\n      ngModule: DisqusModule,\r\n      providers: [\r\n        { provide: SHORTNAME, useValue: shortname },\r\n        {\r\n          provide: DisqusService,\r\n          useFactory: DisqusFactory,\r\n          deps: [SHORTNAME]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
    "import { Injectable, Inject } from '@angular/core';\r\nimport { SHORTNAME } from './disqus.token';\r\n\r\ndeclare const global: any;\r\n\r\n@Injectable()\r\nexport class DisqusService {\r\n\r\n  constructor( @Inject(SHORTNAME) public shortname: string) {\r\n  }\r\n\r\n  get window() {\r\n    return _window();\r\n  }\r\n}\r\n\r\nfunction _window() {\r\n  return typeof window !== 'undefined' ? window : global;\r\n}\r\n\r\n",
    "import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n  Renderer2,\r\n  ElementRef,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { DisqusService } from './disqus.service';\r\nimport { DisqusComment, DisqusReady } from './disqus.model';\r\n\r\n@Component({\r\n  selector: 'disqus',\r\n  template: '<div id=\"disqus_thread\"></div>',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class DisqusComponent implements OnChanges, OnDestroy {\r\n\r\n  /** DISQUS options */\r\n  @Input() url: string;\r\n  @Input() identifier: string;\r\n  @Input() title: string;\r\n  @Input() category: string;\r\n  @Input() language: string;\r\n\r\n  /** DISQUS events */\r\n  @Output() newComment = new EventEmitter<DisqusComment>(true);\r\n  @Output() ready = new EventEmitter<DisqusReady>(true);\r\n  @Output() paginate = new EventEmitter<any>(true);\r\n\r\n  constructor(private renderer: Renderer2, private el: ElementRef, private dService: DisqusService) { }\r\n\r\n  ngOnChanges() {\r\n    /** Reset Disqus if any input changed */\r\n\r\n    if (!this.dService.window.DISQUS) {\r\n      this.addDisqusScript();\r\n    } else {\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  /** Add DISQUS script */\r\n  addDisqusScript() {\r\n\r\n    /** Set DISQUS config */\r\n    this.dService.window.disqus_config = this.getConfig();\r\n\r\n    const disqusScript = this.renderer.createElement('script');\r\n    disqusScript.src = `//${this.dService.shortname}.disqus.com/embed.js`;\r\n    disqusScript.async = true;\r\n    disqusScript.type = 'text/javascript';\r\n    this.renderer.setAttribute(disqusScript, 'data-timestamp', new Date().getTime().toString());\r\n    this.renderer.appendChild(this.el.nativeElement, disqusScript);\r\n  }\r\n\r\n  /** Reset DISQUS with the new config */\r\n  reset() {\r\n    this.dService.window.DISQUS.reset({\r\n      reload: true,\r\n      config: this.getConfig()\r\n    });\r\n  }\r\n\r\n  /** Create DISQUS config from inputs */\r\n  getConfig() {\r\n    const self = this;\r\n    return function () {\r\n      this.page.identifier = self.identifier;\r\n      this.page.url = self.validateUrl(self.url);\r\n      this.page.title = self.title;\r\n      this.category_id = self.category;\r\n      this.language = self.language;\r\n\r\n      /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */\r\n      this.callbacks.onNewComment = [(e) => {\r\n        self.newComment.emit(e);\r\n      }];\r\n\r\n      this.callbacks.onReady = [(e) => {\r\n        self.ready.emit(e);\r\n      }];\r\n\r\n      this.callbacks.onPaginate = [(e) => {\r\n        self.paginate.emit(e);\r\n      }];\r\n    };\r\n  }\r\n\r\n  validateUrl(url: string) {\r\n    /** Validate URL input */\r\n    if (url) {\r\n      const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n\r\n      if (r.test(url)) {\r\n        return url;\r\n      } else {\r\n        console.warn('[Disqus]: Invalid URL, return undefined');\r\n      }\r\n    }\r\n    /** DISQUS will fallback to \"Window.location.href\" when URL is undefined */\r\n    return undefined;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dService.window.DISQUS = undefined;\r\n    this.dService.window.disqus_config = undefined;\r\n  }\r\n}\r\n"
  ],
  "names": [
    "DisqusFactory",
    "shortname",
    "DisqusService",
    "Object",
    "defineProperty",
    "prototype",
    "enumerable",
    "DisqusComponent",
    "renderer",
    "el",
    "dService",
    "this",
    "newComment",
    "EventEmitter",
    "ready",
    "ngOnChanges",
    "window",
    "DISQUS",
    "reset",
    "addDisqusScript",
    "disqus_config",
    "getConfig",
    "disqusScript",
    "createElement",
    "src",
    "async",
    "type",
    "setAttribute",
    "Date",
    "getTime",
    "toString",
    "reload",
    "config",
    "self",
    "page",
    "identifier",
    "url",
    "validateUrl",
    "title",
    "language",
    "callbacks",
    "onNewComment",
    "e",
    "emit",
    "onReady",
    "onPaginate",
    "paginate",
    "test",
    "console",
    "warn",
    "ngOnDestroy",
    "undefined",
    "decorators",
    "Component",
    "args",
    "selector",
    "ctorParameters",
    "propDecorators",
    "Input",
    "category",
    "DisqusModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "SHORTNAME",
    "useValue",
    "useFactory",
    "deps"
  ],
  "mappings": "qPAQA,SAAAA,EAAAC,GAMA,OAAA,IAAAC,EAAAD,uFCTA,OAGAE,OAAAC,eAAAF,EAAAG,UAAA,yBAGA,gDAEAC,YAAA,oBARAJ,qJC6BA,SAAAK,EAAAC,EAAAC,EAAAC,GAA2EC,KAA3EH,SAA2EA,4BAF3EG,KAAAC,WAAA,IAAAC,EAAAA,cAAA,GAEAF,KAAAG,MAAA,IAAAD,EAAAA,cAAA,wCApBA,OAyBAN,EAAAF,UAAAU,YAAA,WAEAJ,KAAAD,SAAAM,OAAAC,OAGAN,KAAAO,QAHAP,KAAAQ,mBASAZ,EAAAF,UAAAc,gBAAA,WAGIR,KAAJD,SAAAM,OAAAI,cAAyCT,KAAzCU,YACI,IAAqBC,EAAzBX,KAAAH,SAAAe,cAAA,UACID,EAAaE,IAAjB,KAAAb,KAAAD,SAAAT,UAAA,uBACIqB,EAAaG,OAAjB,EACIH,EAAaI,KAAjB,kBACAf,KAAAH,SAAAmB,aAAAL,EAAA,kBAAA,IAAAM,MAAAC,UAAAC,gEAKAvB,EAAcF,UAAda,MAAA,WACAP,KAAAD,SAAAM,OAAAC,OAA8BC,OAC9Ba,QAAA,EACAC,OAAArB,KAAAU,eAKAd,EAAAF,UAAAgB,UAAA,WACA,IAAAY,EAAAtB,KACA,OAAA,WACMA,KAAKuB,KAAKC,WAAaF,EAAKE,WAC5BxB,KAAKuB,KAAXE,IAAsBH,EAAtBI,YAAuCJ,EAAvCG,KACMzB,KAAKuB,KAAXI,MAAAL,EAAAK,kCAGM3B,KAAK4B,SAAXN,EAAAM,SAEA5B,KAAO6B,UAAPC,cAAA,SAAAC,GAEAT,EAAArB,WAAA+B,KAAAD,KAEA/B,KAAO6B,UAAPI,SAAA,SAAAF,GAEAT,EAAAnB,MAAA6B,KAAAD,KAEA/B,KAAO6B,UAAPK,YAAA,SAAAH,GACAT,EAAAa,SAAAH,KAAAD,OAKAnC,EAAAF,UAAAgC,YAAA,SAAAD,GAGA,GAAMA,EAAK,CAEX,GADA,gFACAW,KAAAX,GAAA,OAAAA,EAGAY,QAAAC,KAAA,6DAOA1C,EAAAF,UAAA6C,YAAA,WACAvC,KAAAD,SAAAM,OAAAC,OAAAkC,wDAjGA5C,KAEAA,EAAE6C,aACF1B,KAAA2B,EAAAA,UAAAC,OACAC,SAAA,wGAPAhD,EAAAiD,eAAA,WAAA,+CAYA9B,KAAAxB,KAEAK,EAAAkD,gBACArB,MAAAV,KAAAgC,EAAAA,QACAvB,aAAAT,KAAAgC,EAAAA,QAGApB,QAAAZ,KAAAgC,EAAAA,QACAC,WAAAjC,KAAAgC,EAAAA,QACAnB,WAAAb,KAAGgC,EAAAA,wHFpBH,OAOAE,EAAAC,QAAmB,SAAnB5D,GACA,OACA6D,SAAAF,EACAG,YACAC,QAAiBC,EAAjBC,SAAAjE,IAEA+D,QAAA9D,EACAiE,WAAAnE,EACAoE,MAAAH,OAfAL"
}
